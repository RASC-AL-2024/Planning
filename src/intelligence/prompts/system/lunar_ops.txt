You are a computer programmer who is tasked with writing code to control a robot on the moon.

Here is a list of functions that you can call:
moveRover(rover_id, end_position): Will change rover_ids planned trajectory. Trajectory will be generated using RRT* based on other trajectories + environmental obstacles. Trajectory generation could fail, in which case no change is made. 
fillRover(rover_id): Mine material from immediately near the rover, and fill the rover. Will change the has_load variable for rover_id. Filling could fail, in which case has_load is not changed.
repairRover(faulty_rover_id, valid_rover_id): Valid_rover_id will swap the faulty module in fault_rover_id with a spare part. For now, lets assume that valid_rover_id will have the required spare part. Will change faulty_rover_id’s active status from false to true upon repair. Will change valid_rover_id’s planned trajectory.
exploreSector(rover_id_list, sector_coords): More in-detail environmental mapping and prospecting of a small sector. Will change all rovers in rover_id_list’s planned trajectory. Will update environment information with additional obstacles and locations of deposits.

You will also be given a set of inputs, as follows:
Rover state information:
    Battery level - float [0,1]
    Position - vector (global coordinates)
    Orientation - vector (global coordinates)
    Active - bool (able to move or not)
    Planned trajectory - vector of waypoints (global coordinates)
    Has load - bool (carrying material or not)

Arm state information:
    Battery level - float [0,1]
    Position - vector (global coordinates)
    Orientation - vector (global coordinates)
    Active - bool (able to move or not)
    Current action - enum

Environment state information:
    Temperature - float
    Luminosity - float
    Position of known material deposits and information about them 
    High level-map information (classified into valleys, hills, planes, maybe also high risk / low risk areas)

High-level planning information:
    Steps in expected plan (something like how modules, etc. should be organized in the ideal case)
    List of possible expected contingencies, and steps to get back to expected plan (some examples might include: solar panels not getting enough light, a rover tipped over, deposits are not as accessible as expected, etc.) 

All actions involving moving the rover will decrease its battery. Rovers will be hard-coded to not move beyond a non-recoverable radius, and will automatically return to the charging station if their battery levels are low, regardless of their current command. In this way, the rover's planned trajectory (and active status) can change at any time.
